@using DataTools;
@using RecognizerTools;
@using NLog;
@using DTHelperStd;
@inject IJSRuntime JSRuntime


<div class="input-field col s12">
    <label class="active" for="field-name" style="margin-bottom: 5px" >Data Type</label>
    <select ref="DataTypeElementRef" @onchange="HandleDataTypeSelect" style="display:flex; margin-top:10px">
        @if (CloudDataTools.SecondPassStarted)
        {
            if (ColumnMetadata.DataType == DataType.Custom)
            {
                <option value="@ColumnMetadata.DataType" selected>@ColumnMetadata.DataType</option>                
                //TODOVERIFY//ChartJSInterop.CleanupChart();
            }
            else
            {
                <option value="@DataType.Custom">@DataType.Custom</option>
            }

            var dataTypeList = CloudDataTools.SecondPass.GetDataTypesDependOnProbability(ColumnMetadata);

            foreach (var dt in dataTypeList)
            {
                var rec = CloudDataTools.SecondPass.GetWinningRecognizerForDataType(ColumnMetadata, dt);

                if (rec != null)
                {
                    var prob = rec.CurrentState.Probability;
                    var probWithoutNull = rec.CurrentState.ProbabilityWithoutNull;
                    string probString;
                    if(prob == probWithoutNull)
                    {
                        probString = String.Format("{0:P2}", prob);
                    }
                    else
                    {
                        probString = String.Format("{0:P2} (with null) {1:P2} (without null)", prob, probWithoutNull);
                    }
                    if (dt == ColumnMetadata.DataType)
                    {
                        <option value="@ColumnMetadata.DataType" selected>@ColumnMetadata.DataType [@probString]</option>
                        ShowChartGraph(ColumnMetadata.DataType);
                    }
                    else
                    {
                        <option value="@dt">@dt [@probString]</option>
                    }
                }
                else
                {
                    <option value="@dt" selected>@dt</option>
                }

            }

        }
        else
        {
            @foreach (var dt in (DataType[])Enum.GetValues(typeof(DataType)))
            {
                if (dt == ColumnMetadata.DataType)
                {
                    <option value="@dt" selected>@ColumnMetadata.DataType</option>
                }
                else
                {
                    <option value="@dt">@dt</option>
                }
            }
        }

    </select>
    
    @if (DistributionInfo != null)
    {
        @foreach (var kvp in DistributionInfo)
        {
            <span class="sample" style="@(kvp.Value=="True" ? "color: red": "")">
                @kvp.Key : @kvp.Value
            </span>
        }
    }
</div>
@functions
{
    [Parameter] public ColumnMetadata ColumnMetadata { get; set; }
    [Parameter] public CloudDataTools CloudDataTools { get; set; }
    [Parameter] public Action OnDataTypeUpdate { get; set; }
    private static Logger Logger = LogManager.GetCurrentClassLogger();
    private Dictionary<string, string> DistributionInfo;

    ElementReference DataTypeElementRef;

    protected override async Task OnAfterRenderAsync(bool isFirstRender)
    {
        await DataTypeElementRef.InitializeSelect(JSRuntime);
        DistributionInfo = null;

    }
     

    async Task ShowChartGraph(DataType dataType)
    {
        var chartJsInterop = new ChartJSInterop(JSRuntime);
        var rec = CloudDataTools.SecondPass.GetWinningRecognizerForDataType(ColumnMetadata, dataType);
        await chartJsInterop.InitializeSecondPassResultBarChart($"bar-graph-id", "Length Distribution", rec.GetStatus());
        var dataPoints = rec.GetStatus().DataPoints;
        if (dataPoints.Count > 4)
        {
            DistributionInfo = DistributionHelper.NormalTest(dataPoints, rec.GetStatus().MinimunX, rec.GetStatus().MaximunX);
        }

        //LoggerInterop.Log(typeof(CityRecognizer).GetMethod("GetDescriptionV2").Invoke(null, null).ToString());
        var allRecs = CloudDataTools.SecondPass.GetRecognizerInstancesDependOnProbability(ColumnMetadata);
        var dataset1 = allRecs.Select(r => (r.GetDescription(), r.CurrentState.Probability)).ToList();
        var dataset2 = allRecs.Select(r => (r.GetDescription(), r.CurrentState.ProbabilityWithoutNull)).ToList();
        await chartJsInterop.InitializeProbabilityBarChart($"horizontal-bar-id", dataset1, dataset2);

    }

    void HandleDataTypeSelect(ChangeEventArgs newValue)
    {
        ColumnMetadata.SetDataType((DataType)Enum.Parse(typeof(DataType),newValue.Value.ToString()));
        Logger.Info($"Change Column{ColumnMetadata.ColumnIndex} DataType to: {newValue.Value.ToString()}");
        OnDataTypeUpdate?.Invoke();
    }
}