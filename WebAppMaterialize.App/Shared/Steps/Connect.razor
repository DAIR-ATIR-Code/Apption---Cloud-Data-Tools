@using DataTools;
@using WebAppMaterialize.App
@using NLog;
@using WebAppMaterialize.App.Services.Interfaces;
@using DTHelperStd;
@using System.Data.SqlClient
@using System.IO;
@using WebAppMaterialize.App.Services;
@inject IJSRuntime JSRuntime

<div>
	<div class="row">
		<h5 style="margin-bottom: 30px;">FileSource</h5>
		<div class="input-field col s12">
			<div>
				<select ref="SeparatorRef" @onchange="HandleSeparatorSelect" style="display:flex; margin-top:10px">
					@{
						foreach (var separator in (SeparatorType[])Enum.GetValues(typeof(SeparatorType)))
						{
							if (separator == PreRequiredObject.SeparatorType)
							{
								<option value="@separator" selected>@PreRequiredObject.SeparatorType</option>
							}
							else
							{
								<option value="@separator">@separator</option>
							}
						}
					}
				</select>
				<label>Separator Selects</label>
			</div>
			<div>
				<p>
					<label>
						<input type="checkbox" class="filled-in" checked=@PreRequiredObject.HasHeaders @onchange="eventArgs => { CheckboxClicked(eventArgs.Value); }" />
						<span>Has Headers</span>
					</label>
				</p>
			</div>
			<div>
				@*@if (FilePaths != null)
					{
						foreach (var filepath in FilePaths)
						{
							<p>@filepath</p>
						}
					}
					<button class="btn waves-effect waves-light blue darken-1" onclick="@OpenFileDialog">Select a file</button>*@
                <div class="progress" id="fileUploadProgress" style="display:none;">
                    <div class="determinate" style="width: 0%"></div>
                </div>
				<form action="#">
					<div class="file-field input-field">
						<div class="btn">
							<span>File</span>							
							<input type="file" id="fileupload" data-url="api/upload" title=" " />
						</div>
						<div class="file-path-wrapper">
							<input class="file-path validate" type="text" id="file-path">
						</div>
					</div>
				</form>
			</div>
		</div>
	</div>
	<div class="row">
		<h5>Target</h5>
		<div class="input-field col s12">
			<input placeholder="Server=ServerName;Initial Catalog=DataBaseName;Uid=UserName;Pwd=Secret;" id="connect-string" type="text" @onchange="HandleConnectionStringChange" />
			<label class="active" for="connect-string">Connect String</label>
		</div>
		<div class="col s12 valign-wrapper center-align" style="height: 64px">
			<button class="btn waves-effect waves-light blue darken-1" @onclick="HandleTestConnectionClick">Test Connection</button>
			@if (IsConnectionCheckInProgress)
			{
				<div class="lds-roller"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>
			}
			@if (IsConnectionValidated)
			{
				<i class="medium material-icons" style="color: green">check</i>
			}
			@if (IsConnectionInvalid)
			{
				<i class="medium material-icons" style="color: red">close</i>
			}
		</div>
	</div>
    <div>
        <button class="btn waves-effect waves-light grey lighten-1" id="startAnalyze" onclick="@AnalyzeFiles">Start Analysis</button>
    </div>
</div>


@functions
{
	[Parameter] public IUIService UIService { get; set; }
	[Parameter] public PreRequiredObject PreRequiredObject { get; set; }
	[Parameter] public EventCallback AnalyzeFiles { get; set; }

	private static Logger Logger = LogManager.GetCurrentClassLogger();
	public bool HideNextStep { get; set; } = true;
	public string[] FilePaths { get; set; }
	private bool IsConnectionValidated { get; set; } = false;
	private bool IsConnectionInvalid { get; set; } = false;
	private bool IsConnectionCheckInProgress { get; set; } = false;

	private List<string> excelFile;
	private const int maxAllowedFiles = 1;
	private string filepath;


	string imageData = String.Empty;

	ElementReference SeparatorRef;

	void HandleSeparatorSelect(ChangeEventArgs newValue)
	{
		SeparatorType selected;
		Enum.TryParse<SeparatorType>(newValue.Value.ToString(), out selected);
		PreRequiredObject.SeparatorType = selected;
		
	}

	protected override async Task OnAfterRenderAsync(bool isFirstRender)
	{
		await FilesInterop.InitializeFileInput(JSRuntime);
		await SeparatorRef.InitializeSelect(JSRuntime);
	}

	public void CheckboxClicked(object isChecked)
	{
		PreRequiredObject.HasHeaders = (bool)isChecked;
		StateHasChanged();
	}

	private async Task StartAnalysis()
	{
		await AnalyzeFiles.InvokeAsync();
	}

	private async Task LoadFiles(InputFileChangeEventArgs e)
	{
		excelFile.Clear();
		//ErrorMessage = string.Empty;
		if (e.FileCount > maxAllowedFiles)
		{
			//ErrorMessage = $"Only {maxAllowedFiles} file can be uploaded at a time";
			return;
		}
		foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
		{
		
			using var stream = file.OpenReadStream();
			using var ms = new MemoryStream();
			await stream.CopyToAsync(ms);
			excelFile.Add($"data:{file.ContentType};base64,{Convert.ToBase64String(ms.ToArray())}");
		}
	}

	void HandleConnectionStringChange(ChangeEventArgs newValue)
	{
		PreRequiredObject.ConnectionString = newValue.Value.ToString();
		Logger.Info($"ConnectString changes to {newValue.Value.ToString()}");
		StateHasChanged();
	}

    public void HandleTestConnectionClick()
    {
        Logger.Info("Testing the Connection");
        IsConnectionCheckInProgress = true;
        IsConnectionValidated = false;
        IsConnectionInvalid = false;

        try
        {
            using (var conn = new SqlConnection(PreRequiredObject.ConnectionString))
            {
                conn.Open();
            }
            Logger.Info($"Connection string tested");
            IsConnectionValidated = true;
            IsConnectionInvalid = false;
            IsConnectionCheckInProgress = false;
            // Good connection string
        }
        catch (SqlException sqlE)
        {
            // Bad connection string
            Logger.Info($"Invalid connection string {sqlE.ToString()}");
            ErrorInterop.Alert(JSRuntime, $"Invalid connection string {sqlE.ToString()}");
            IsConnectionValidated = false;
            IsConnectionInvalid = true;
            IsConnectionCheckInProgress = false;
        }
        finally
        {
            StateHasChanged();
        }

    }
}
